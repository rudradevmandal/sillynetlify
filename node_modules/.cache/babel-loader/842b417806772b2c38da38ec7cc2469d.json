{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('katex').KatexOptions} KatexOptions\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode'>} Options\n */\nimport katex from 'katex';\n/**\n * @param {Options} [options]\n * @returns {HtmlExtension}\n */\n\nexport function mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded();\n        this.tag('<div class=\"math math-display\">');\n      },\n\n      mathFlowFenceMeta() {\n        this.buffer();\n      },\n\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">');\n        this.buffer();\n      }\n\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume();\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true));\n        this.tag('</div>');\n        this.setData('mathFlowOpen');\n        this.setData('slurpOneLineEnding');\n      },\n\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true);\n          this.setData('slurpOneLineEnding', true);\n          this.buffer();\n        }\n      },\n\n      mathFlowFenceMeta() {\n        this.resume();\n      },\n\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token));\n      },\n\n      mathText() {\n        const value = this.resume();\n        this.tag(math(value, false));\n        this.tag('</span>');\n      },\n\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token));\n      }\n\n    }\n  };\n  /**\n   * @param {string} value\n   * @param {boolean} displayMode\n   * @returns {string}\n   */\n\n  function math(value, displayMode) {\n    return katex.renderToString(value, Object.assign({}, options, {\n      displayMode\n    }));\n  }\n}","map":{"version":3,"names":["katex","mathHtml","options","enter","mathFlow","lineEndingIfNeeded","tag","mathFlowFenceMeta","buffer","mathText","exit","value","resume","math","replace","setData","mathFlowFence","getData","mathFlowValue","token","raw","sliceSerialize","mathTextData","displayMode","renderToString","Object","assign"],"sources":["C:/Users/rudra/Documents/original_website/The-Weirdos-NFT-Website-Starter-Code/node_modules/micromark-extension-math/dev/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('katex').KatexOptions} KatexOptions\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode'>} Options\n */\n\nimport katex from 'katex'\n\n/**\n * @param {Options} [options]\n * @returns {HtmlExtension}\n */\nexport function mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded()\n        this.tag('<div class=\"math math-display\">')\n      },\n      mathFlowFenceMeta() {\n        this.buffer()\n      },\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">')\n        this.buffer()\n      }\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume()\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true))\n        this.tag('</div>')\n        this.setData('mathFlowOpen')\n        this.setData('slurpOneLineEnding')\n      },\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true)\n          this.setData('slurpOneLineEnding', true)\n          this.buffer()\n        }\n      },\n      mathFlowFenceMeta() {\n        this.resume()\n      },\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token))\n      },\n      mathText() {\n        const value = this.resume()\n        this.tag(math(value, false))\n        this.tag('</span>')\n      },\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token))\n      }\n    }\n  }\n\n  /**\n   * @param {string} value\n   * @param {boolean} displayMode\n   * @returns {string}\n   */\n  function math(value, displayMode) {\n    return katex.renderToString(\n      value,\n      Object.assign({}, options, {displayMode})\n    )\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;EAChC,OAAO;IACLC,KAAK,EAAE;MACLC,QAAQ,GAAG;QACT,KAAKC,kBAAL;QACA,KAAKC,GAAL,CAAS,iCAAT;MACD,CAJI;;MAKLC,iBAAiB,GAAG;QAClB,KAAKC,MAAL;MACD,CAPI;;MAQLC,QAAQ,GAAG;QACT;QACA,KAAKH,GAAL,CAAS,iCAAT;QACA,KAAKE,MAAL;MACD;;IAZI,CADF;IAeLE,IAAI,EAAE;MACJN,QAAQ,GAAG;QACT,MAAMO,KAAK,GAAG,KAAKC,MAAL,EAAd;QACA,KAAKN,GAAL,CAASO,IAAI,CAACF,KAAK,CAACG,OAAN,CAAc,eAAd,EAA+B,EAA/B,CAAD,EAAqC,IAArC,CAAb;QACA,KAAKR,GAAL,CAAS,QAAT;QACA,KAAKS,OAAL,CAAa,cAAb;QACA,KAAKA,OAAL,CAAa,oBAAb;MACD,CAPG;;MAQJC,aAAa,GAAG;QACd;QACA,IAAI,CAAC,KAAKC,OAAL,CAAa,cAAb,CAAL,EAAmC;UACjC,KAAKF,OAAL,CAAa,cAAb,EAA6B,IAA7B;UACA,KAAKA,OAAL,CAAa,oBAAb,EAAmC,IAAnC;UACA,KAAKP,MAAL;QACD;MACF,CAfG;;MAgBJD,iBAAiB,GAAG;QAClB,KAAKK,MAAL;MACD,CAlBG;;MAmBJM,aAAa,CAACC,KAAD,EAAQ;QACnB,KAAKC,GAAL,CAAS,KAAKC,cAAL,CAAoBF,KAApB,CAAT;MACD,CArBG;;MAsBJV,QAAQ,GAAG;QACT,MAAME,KAAK,GAAG,KAAKC,MAAL,EAAd;QACA,KAAKN,GAAL,CAASO,IAAI,CAACF,KAAD,EAAQ,KAAR,CAAb;QACA,KAAKL,GAAL,CAAS,SAAT;MACD,CA1BG;;MA2BJgB,YAAY,CAACH,KAAD,EAAQ;QAClB,KAAKC,GAAL,CAAS,KAAKC,cAAL,CAAoBF,KAApB,CAAT;MACD;;IA7BG;EAfD,CAAP;EAgDA;AACF;AACA;AACA;AACA;;EACE,SAASN,IAAT,CAAcF,KAAd,EAAqBY,WAArB,EAAkC;IAChC,OAAOvB,KAAK,CAACwB,cAAN,CACLb,KADK,EAELc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,OAAlB,EAA2B;MAACqB;IAAD,CAA3B,CAFK,CAAP;EAID;AACF"},"metadata":{},"sourceType":"module"}