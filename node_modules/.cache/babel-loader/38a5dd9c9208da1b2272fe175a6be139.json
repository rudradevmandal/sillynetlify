{"ast":null,"code":"(function () {\n  'use strict';\n\n  var collator;\n\n  try {\n    collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n      sensitivity: \"base\"\n    }) : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  } // arrays to re-use\n\n\n  var prevRow = [],\n      str2Char = [];\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function (str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n      var str1Len = str1.length,\n          str2Len = str2.length; // base cases\n\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len; // two rows\n\n      var curCol, nextCol, i, j, tmp; // initialise previous row\n\n      for (i = 0; i < str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n\n      prevRow[str2Len] = str2Len;\n      var strCmp;\n\n      if (useCollator) {\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol; // substution\n\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n            nextCol = prevRow[j] + (strCmp ? 0 : 1); // insertion\n\n            tmp = curCol + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // deletion\n\n\n            tmp = prevRow[j + 1] + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // copy current col value into previous (in preparation for next iteration)\n\n\n            prevRow[j] = curCol;\n          } // copy last col value into previous (in preparation for next iteration)\n\n\n          prevRow[j] = nextCol;\n        }\n      } else {\n        // calculate current row distance from previous row without collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol; // substution\n\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n            nextCol = prevRow[j] + (strCmp ? 0 : 1); // insertion\n\n            tmp = curCol + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // deletion\n\n\n            tmp = prevRow[j + 1] + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            } // copy current col value into previous (in preparation for next iteration)\n\n\n            prevRow[j] = curCol;\n          } // copy last col value into previous (in preparation for next iteration)\n\n\n          prevRow[j] = nextCol;\n        }\n      }\n\n      return nextCol;\n    }\n  }; // amd\n\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  } // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  } // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  } // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n})();","map":{"version":3,"names":["collator","Intl","Collator","sensitivity","err","console","log","prevRow","str2Char","Levenshtein","get","str1","str2","options","useCollator","str1Len","length","str2Len","curCol","nextCol","i","j","tmp","charCodeAt","strCmp","compare","charAt","String","fromCharCode","define","amd","module","exports","self","postMessage","importScripts","window"],"sources":["C:/Users/rudra/Documents/original_website/The-Weirdos-NFT-Website-Starter-Code/node_modules/fast-levenshtein/levenshtein.js"],"sourcesContent":["(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      var str1Len = str1.length,\n        str2Len = str2.length;\n      \n      // base cases\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len;\n\n      // two rows\n      var curCol, nextCol, i, j, tmp;\n\n      // initialise previous row\n      for (i=0; i<str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n      prevRow[str2Len] = str2Len;\n\n      var strCmp;\n      if (useCollator) {\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      else {\n        // calculate current row distance from previous row without collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      return nextCol;\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}